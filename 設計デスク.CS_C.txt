//==================================================
//　　　　　　　　　Logon_aspx.cs
//　　　　　　助けるゾウ　設計デスクページ
//　　　　坂口　裕宜　2019.6.6 最終更新
//
//　　テーブル呼び出しのｃｓｖカスタマイズ
//==================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Diagnostics;
using System.Text;//csv読み込み用
using Microsoft.VisualBasic.FileIO;//parse
using System.Windows.Forms;
using System.Threading;
using System.Data.SqlClient;

namespace elephants_test
{
    public partial class design_desk : System.Web.UI.Page
    {
        protected void Page_Init(object sender, EventArgs e)
        {
            if (Session["StaffID"] == null)
            {
                Response.Redirect("Logon.aspx");//ログオンせずにアクセスできない設定
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            //キャッシュしないよう設定
        }
         

        protected void Bottun_jidousekkei_Click(object sender, EventArgs e)
        {
            //作成者と更新日の書き込み
            DesignerLabel.Text = Convert.ToString(Session["StaffName"]);
            DesigndataLabel.Text = DateTime.Now.ToString("yyyy/MM/dd");

            string fileName = null;//仕様書ファイルのパス格納変数

            //仕様書ファイルのパス取得ウィンドウ立ち上げ
            var t = new Thread((ThreadStart)(() => {
                OpenFileDialog op = new OpenFileDialog();
                op.Title = "ファイルを開く";
                op.InitialDirectory = @"C:\elephants\elephants_test\elephants_test";
                op.FileName = @"○○〇.xlsm";
                op.Filter = "仕様書データ(*.xlsm)|*.xlsm|すべてのファイル(*.*)|*.*";
                op.FilterIndex = 1;
                //オープンファイルダイアログを表示する
                DialogResult result = op.ShowDialog();

                if (result == DialogResult.OK)
                {
                    //「開く」ボタンが選択された時の処理
                    fileName = op.FileName;  //こんな感じで選択されたファイルのパスが取得できる

                }
                else if (result == DialogResult.Cancel)
                {
                    //「キャンセル」ボタンまたは「×」ボタンが選択された時の処理
                }

            }));

            t.SetApartmentState(ApartmentState.STA);
            t.Start();
            t.Join();

            // パイソンプログラムの指定
            string python = @"C:\Users\75110\Anaconda3\python.exe";

            // 仕様書読み込みプログラムコード場所の指定
            string myPythonApp = @"C:\elephants\elephants_test\elephants_test\read_shiyou.py";

            // Create new process start info
            ProcessStartInfo myProcessStartInfo = new ProcessStartInfo(python);

            // 標準出力からの読み込みを可能にする
            myProcessStartInfo.UseShellExecute = false;
            myProcessStartInfo.RedirectStandardOutput = true;

            // パイソンコードを実行する
            // 1st arguments はコードの指定、 2ndは　読み込む仕様書ファイル場所 3rdは作成したcsvの名前に当てる値。
            myProcessStartInfo.Arguments = myPythonApp +" "+ fileName + " "+Convert.ToString(Session["StaffID"]);


            //仕様書読み込みコード実行準備
            Process myProcess = new Process();
            // 実行指示内容の入力
            myProcess.StartInfo = myProcessStartInfo;
            
            // 実行
            myProcess.Start();

            // 標準出力の読み込み 
            // でっとロック除けのため、先に標準出力を読み込み、プロセスが終わるのを待つ。:
            StreamReader myStreamReader = myProcess.StandardOutput;

            // 仕様書読み込みコードの終了信号を待ち、その後、本プログラムを終了する.
            myProcess.WaitForExit();
            myProcess.Close();
            
            //仕様書読み込みプログラムコードで作成したcsvファイル場所指定         
            TextFieldParser parser = new TextFieldParser(@"C:\elephants\elephants_test\elephants_test\eleph-" + Convert.ToString(Session["StaffID"])+ ".csv", Encoding.GetEncoding("Shift_JIS"));
            parser.TextFieldType = FieldType.Delimited;
            parser.SetDelimiters(",");// ","区切り
            //parser.SetDelimiters("\t");                    // タブ区切り(TSVファイルの場合)
            //csvファイルを辞書型変数に読み込み
            var shiyou_dic = new Dictionary<string, string>();

            while (!parser.EndOfData)
            {
                string[] row = parser.ReadFields();//1行分読み込み
                shiyou_dic.Add(row[0], row[1]);
            }

            shiyou_dic.Add("架装タイプ", shiyou_dic["架装型式"].Substring(0, 3));//架装タイプの辞書登録

            ////フォームの表示
            HikiateLabel.Text = shiyou_dic["受注番号"];
            HikiateNameLabel.Text = shiyou_dic["引き当て先"];
            ShitenLabel.Text = shiyou_dic["支店"];
            SalesLabel.Text = shiyou_dic["担当者"];
            KasouLabel.Text = shiyou_dic["架装型式"];
            SyasiMakerLabel.Text = shiyou_dic["メーカー"];
            SyasiLabel.Text = shiyou_dic["車型"];
            
            ///BOM作成開始
            string queryString_del, queryString;
            string connectionString = System.Configuration.ConfigurationManager.
                            ConnectionStrings["ELEPHANTS_TESTConnectionString"].ConnectionString;
            int ret = -1;
            int num_list = 1;
            
            
            switch (shiyou_dic["架装型式"].Substring(0,2))
            {
                case "PB": //架装型式がPB~のとき
                    try
                    {
                        //部品リスト作成のため、仕様項目/部品構成表の名前(順番)、クエリを明記したcsvファイル場所指定         
                        
                        //接続文字列を取得する
                        queryString_del = "DELETE  FROM tbl_design WHERE \"ユーザー+id\" LIKE '" +
                                  Session["StaffID"] +
                                  "-%';";
                        //row[0]=テーブル名
                                                
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            SqlCommand command_del = new SqlCommand(queryString_del, connection);
                            
                            connection.Open();//接続開始
                            command_del.ExecuteNonQuery();//前回のユーザーの設計リスト削除

                            TextFieldParser queryStrings = new TextFieldParser(@"C:\elephants\elephants_test\elephants_test\Master\PB.csv", Encoding.GetEncoding("Shift_JIS"));
                            queryStrings.TextFieldType = FieldType.Delimited;
                            queryStrings.SetDelimiters(",,");// ","区切り
                          
                            while (!queryStrings.EndOfData)
                            {
                                //row[0]:テーブル名
                                //row[1]:仕様項目1,仕様項目2,...（品目番号, 品目名称, 備考, ID, ユーザーネーム, 最終更新日を除く）
                                string[] row = queryStrings.ReadFields();//1行分読み込み
                                queryString = "INSERT INTO " + row[0] + "(品目番号, 品目名称, 備考, " + row[1] + ", ID, ユーザーネーム, 最終更新日) " +
                                  "SELECT '---設計必要---','---入力必要---','---入力必要---','" + shiyou_dic[row[1]] +
                                  "',(SELECT coalesce(MAX(ID) + 1, 1) FROM " + row[0] + " ) , '" + Session["StaffName"] + "', '" + DateTime.Now + "' " +
                                  "WHERE NOT EXISTS(SELECT 'X' FROM " + row[0] + " WHERE " + row[1] + "= '" + shiyou_dic[row[1]] + "' );" +
                                  "INSERT tbl_design(品目番号, 備考, 品目名称, \"ユーザー+id\") SELECT 品目番号, 備考, 品目名称, '" + Session["StaffID"] + "-" + num_list +
                                  "' FROM " + row[0] + " WHERE \"" + row[1] + "\" = '" + shiyou_dic[row[1]] + "' ";
                                SqlCommand command = new SqlCommand(queryString, connection);
                                command_del.ExecuteNonQuery();//設計テーブルに構成部品１行を挿入
                                num_list = num_list + 1;//主キー用計算
                                SyasiLabel.Text = queryString;
            
                            }
                            GridView1.DataBind();
                        }

                    }
                    catch (Exception)
                    {
                        ret = -1;
                                            }
                    break;
                default:
                    KasouLabel.Text = "設計マスタに未登録です";
                    break;
                    
            }
         }

        protected void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        protected void SqlDataSource1_Selecting(object sender, SqlDataSourceSelectingEventArgs e)
        {

        }

    }
}

